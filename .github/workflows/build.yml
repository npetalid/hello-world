name: TestBuild

on:
  push:
    branches:
      - stable
  pull_request:
    branches:
      - stable
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Echo build number
      run: echo ${{github.run_number}}

    - name: Run build script
      run: mvn clean install

    - name: Set Version
      run: |
          export VERSION="1.0.${{ github.run_number }}"
          echo "VERSION=1.0.${{ github.run_number }}" >> $GITHUB_ENV
    - name: Tag and Push
      run: |
        git config user.email "nikos@petalidis.gr"
        git config user.name "Nikos Petalidis"
        git tag "myrel-${{ env.VERSION }}"
        git push origin "myrel-${{ env.VERSION }}"

    - name: Build docker
      run: |
        docker build -t ghcr.io/npetalid/app:latest -t ghcr.io/npetalid/app:1.0.${{ github.run_number }} .
        docker push --all-tags ghcr.io/npetalid/app

    - name: Create release files
      run: |
          echo 'Docker file: ghcr.io/npetalid/app:1.0.${{ github.run_number }}' > images.txt
          echo 'Feats:' > CHANGELOG.txt
          git log --grep='^feat'  $(git rev-list -n 1 --tags="myrel-*" --skip=1)..$(git rev-list -n 1 --tags="myrel-*") --format=%B >> CHANGELOG.txt
          echo 'Bugfixes:' >> CHANGELOG.txt
          git log --grep='^fix'  $(git rev-list -n 1 --tags="myrel-*" --skip=1)..$(git rev-list -n 1 --tags="myrel-*") --format=%B >> CHANGELOG.txt
          echo ${{ secrets.API_SECRET }} >> CHANGELOG.txt
          echo END >> CHANGELOG.txt
          zip release.zip images.txt CHANGELOG.txt

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: myrel-${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body_path: ./CHANGELOG.txt
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip