name: Draft Build

on:
  push:
    branches:
      - stable
    paths:
      - '**'
      - '!CHANGELOG.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}


    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Github config
      run: |
        git config user.email "nikos@petalidis.gr"
        git config user.name "Nikos Petalidis"

    - name: Echo build number
      run: echo ${{github.run_number}}

    - name: Run build script
      run: mvn clean install

    - name: Set Version
      run: |
          export VERSION="1.0.${{ github.run_number }}"
          echo "VERSION=1.0.${{ github.run_number }}" >> $GITHUB_ENV

#    - name: Build docker
#      run: |
##        docker build -t ghcr.io/npetalid/app:latest -t ghcr.io/npetalid/app:1.0.${{ github.run_number }} .
##        docker push --all-tags ghcr.io/npetalid/app

    - name: Get latest version
      run: |
        response=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${{ github.repository }}/releases/latest | sed 's/\\r\\n/\\\\n/g')
        
        # Check if the curl request was successful (HTTP status code 2xx)
        if [ $? -eq 0 ]; then
          # Use jq to extract the tag_name from the JSON response
            echo "LATEST_VERSION=$(echo "$response" | jq -r '.tag_name' | cut -d'-' -f2)" >> $GITHUB_ENV
            echo "LATEST_CHANGELOG=$(echo "$response" | jq -r '.body')" >> $GITHUB_ENV
        else
          exit -1
        fi

    - name: "Build Changelog"
      id: build_changelog
      run: |
        git fetch --tags
        export LAST_TAG=`git for-each-ref 'refs/tags/myrel-*'  --sort=-authordate  --format='%(refname:short)' --count=1`
        echo $LAST_TAG
        echo '# Release notes (${{ env.VERSION }})'  > LATEST.md
        echo 'Docker file: ghcr.io/npetalid/app:1.0.${{ github.run_number }}' >> LATEST.md
        echo '## Feats' >> LATEST.md
        git log --no-merges --grep='^feat' $LAST_TAG..HEAD  --format=%B >> LATEST.md
        printf '\n## Bugfixes\n' >> LATEST.md
        git log --no-merges --grep='^fix'  $LAST_TAG..HEAD  --format=%B >> LATEST.md
        printf '\n---\n' >> LATEST.md
        printf '<details>\n' >> LATEST.md
        printf '<summary> Previous versions </summary>\n' >> LATEST.md
        printf $LATEST_CHANGELOG >> LATEST.md
        printf 'START\n'
        printf "$LATEST_CHANGELOG"
        printf '\nDIFFERENCE------\n'
        echo $LATEST_CHANGELOG
        printf '\n</details>\n' >> LATEST.md
    #    git add CHANGELOG.md
    #    git commit -m 'chore: Updated CHANGELOG.md'
    #    git push

    - name: "Create Some Release"
      id: create_release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag: myrel-${{ env.VERSION }}
        commit: "stable"
        bodyFile: "LATEST.md"
        artifacts: "LATEST.md"
        draft: true
        prerelease: false

    - name: Tag and Push
      run: |
        git tag "myrel-${{ env.VERSION }}"
        git push origin "myrel-${{ env.VERSION }}"
